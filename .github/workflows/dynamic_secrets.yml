name: Secrets
# Run this workflow every time a new commit pushed to your repository.
on: 
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
jobs:
  fetch_aws_dynamic_secrets:
    if: github.repository == 'akeylesstyree/akeyless-dba-workflow-tf'
    runs-on: ubuntu-latest
    name: Fetch AWS dynamic secrets
    #---------Required---------#
    permissions: # Must change the job token permissions to use JWT auth
      id-token: write
      contents: read
      
    #--------------------------#       
    steps:
      - name: Fetch dynamic secrets from AKeyless
        id: fetch-dynamic-secrets
        uses: akeyless-community/akeyless-github-action@v1.0.1
        with:
          access-id: p-90r1x6r1nx59om # Looks like p-fq3afjjxv839
          access-type: jwt
          dynamic-secrets: |
            - name: "/Sandbox/4 - Dynamic/2 - Cloud/aws"
              output-name: "aws_dynamic_secrets"
            - name: "/Sandbox/4 - Dynamic/2 - Cloud/gcp_dynamic_sa"
              output-name: GOOGLE_CREDENTIALS

          # static-secrets: |
          #   - name: "/Sandbox/2 - Static/gcp-tf-credentials"
          #     output-name: "GOOGLE_CREDENTIALS"
          
          
          export-secrets-to-outputs: true
          export-secrets-to-environment: true
      - name: Export Secrets to Environment
        run: |
          echo '${{ steps.fetch-dynamic-secrets.outputs.aws_dynamic_secrets }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV      
      # - name: Google Credentials from Akeyless
      #   run: echo "${{ env.GOOGLE_CREDENTIALS }}"
      - name: Verify Vars
        run: |
          echo "access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}"
          echo "id: ${{ env.AWS_id }}"
          echo "secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY}}"
          echo "security_token: ${{ env.AWS_security_token }}"
          echo "ttl_in_minutes: ${{ env.AWS_ttl_in_minutes }}"
          echo "type: ${{ env.AWS_type }}"
          echo "user: ${{ env.AWS_user }}"
          echo "key1: ${{ env.GOOGLE_CREDENTIALS }}" >> secrets.txt
          export AWS_ACCESS_KEY_ID="${{ env.AWS_access_key_id }}"
          export AWS_SECRET_ACCESS_KEY="${{ env.AWS_secret_access_key }}"
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        uses: hashicorp/setup-terraform@v2
        id: init
      - run: terraform init
      - run: echo ${{ steps.init.outputs.stdout }}
      - run: echo ${{ steps.init.outputs.stderr }}
      - run: echo ${{ steps.init.outputs.exitcode }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        run: |
          terraform plan -no-color
          echo "access_key_id: ${{ env.AWS_access_key_id }}"
          echo "id: ${{ env.AWS_id }}"
          echo "secret_access_key: ${{ env.AWS_secret_access_key }}"
        id: plan
      - uses: hashicorp/setup-terraform@v2
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        run: |
          terraform apply -no-color -auto-approve
          echo "access_key_id: ${{ env.AWS_access_key_id }}"
          echo "id: ${{ env.AWS_id }}"
          echo "secret_access_key: ${{ env.AWS_secret_access_key }}"
        id: apply
      - uses: hashicorp/setup-terraform@v2
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
